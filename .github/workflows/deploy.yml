name: Build and Deploy Spring Boot Application3

on:
  push:
    branches:
      - main
  workflow_dispatch:  # ✅ 수동 실행 허용

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v2

      # 2. JDK 17 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 빌드 (테스트 코드 실행 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # 원하는 AWS 리전 설정

      # 5. 빌드된 JAR 파일 압축
      - name: Zip application
        run: |
          cp build/libs/*.jar application.jar
          zip application.zip application.jar

      # 6. S3에 업로드 (Elastic Beanstalk에서 사용할 파일)
      - name: Upload to S3
        run: |
         aws s3 cp application.zip s3://elasticbeanstalk-ap-northeast-2-940482449155/app-deployments/application.zip

      # 7. Elastic Beanstalk에 배포
      - name: Deploy to Elastic Beanstalk
        run: |
          VERSION_LABEL=v-$(date +%Y%m%d%H%M%S)  # 💡 유니크한 시간 기반 버전 생성

          echo "Using version label: $VERSION_LABEL"

          aws elasticbeanstalk create-application-version \
            --application-name incu-server \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=elasticbeanstalk-ap-northeast-2-940482449155,S3Key=app-deployments/application.zip \
            --auto-create-application

          aws elasticbeanstalk update-environment \
            --environment-name Incu-server-env \
            --version-label $VERSION_LABEL
